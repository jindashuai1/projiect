#include <iostream>
#include <queue>

using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int value) : val(value), left(nullptr), right(nullptr) {}
};

// 前序遍历
void preorderTraversal(TreeNode* root) {
    if (root) {
        cout << root->val << " ";  // 访问根节点
        preorderTraversal(root->left);   // 递归前序遍历左子树
        preorderTraversal(root->right);  // 递归前序遍历右子树
    }
}

// 中序遍历
void inorderTraversal(TreeNode* root) {
    if (root) {
        inorderTraversal(root->left);   // 递归中序遍历左子树
        cout << root->val << " ";  // 访问根节点
        inorderTraversal(root->right);  // 递归中序遍历右子树
    }
}

// 后序遍历
void postorderTraversal(TreeNode* root) {
    if (root) {
        postorderTraversal(root->left);   // 递归后序遍历左子树
        postorderTraversal(root->right);  // 递归后序遍历右子树
        cout << root->val << " ";  // 访问根节点
    }
}

// 层序遍历
void levelOrderTraversal(TreeNode* root) {
    if (!root) return;

    queue<TreeNode*> q;
    q.push(root);

    while (!q.empty()) {
        TreeNode* current = q.front();
        q.pop();
        cout << current->val << " ";  // 访问当前节点

        if (current->left) q.push(current->left);
        if (current->right) q.push(current->right);
    }
}

int main() {
    // 创建一个简单的二叉树
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);

    cout << "前序遍历结果: ";
    preorderTraversal(root);
    cout << endl;

    cout << "中序遍历结果: ";
    inorderTraversal(root);
    cout << endl;

    cout << "后序遍历结果: ";
    postorderTraversal(root);
    cout << endl;

    cout << "层序遍历结果: ";
    levelOrderTraversal(root);
    cout << endl;

    return 0;
}
